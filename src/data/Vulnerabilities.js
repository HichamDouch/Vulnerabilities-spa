export default [
    {
        id : 1,
        title : "A01:2021-Broken Access Control",
        truncat: "moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category",
        description : '<p><strong><span style="font-size: 28px;">Overview</span></strong></p><p><br>Shifting up one position to #2, previously known as Sensitive Data Exposure, which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password, CWE-327: Broken or Risky Crypto Algorithm, and CWE-331 Insufficient Entropy.</p><p><br><span style="font-size: 24px;"><strong>Description</strong></span></p><p><br>The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU&apos;s General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data:<br>Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems.<br>Are any old or weak cryptographic algorithms or protocols used either by default or in older code?<br>Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories?<br>Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing?<br>Is the received server certificate and the trust chain properly validated?<br>Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate?<br>Are passwords being used as cryptographic keys in absence of a password base key derivation function?<br>Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability?<br>Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed?<br>Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use?<br>Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks?<br>See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)</p><p><br><span style="font-size: 24px;"><strong>How to Prevent</strong></span></p><p><br>Do the following, at a minimum, and consult the references:<br>Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.<br>Don&apos;t store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.<br>Make sure to encrypt all sensitive data at rest.<br>Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.<br>Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).<br>Disable caching for response that contain sensitive data.<br>Apply required security controls as per the data classification.<br>Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.<br>Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.<br>Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key.<br>Always use authenticated encryption instead of just encryption.<br>Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function.<br>Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security.<br>Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 .<br>Verify independently the effectiveness of configuration and settings.<br>Example Attack Scenarios<br>Scenario #1: An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text.<br>Scenario #2: A site doesn&apos;t use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user&apos;s session cookie. The attacker then replays this cookie and hijacks the user&apos;s (authenticated) session, accessing or modifying the user&apos;s private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer.<br>Scenario #3: The password database uses unsalted or simple hashes to store everyone&apos;s passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted.</p>',
        image_name : "accessControl",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 2,
        title : "A02:2021-Cryptographic Failures",
        truncat : "shifts up one position to #2, previously known as A3:2017-Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed name focuses on failures related to cryptography as it has been implicitly before. This category often leads to sensitive data exposure or system compromise.",
        description : `<div> <p><strong><span style="font-size: 28px;">Overview</span></strong></p> <p><br>Shifting up one position to #2, previously known as Sensitive Data Exposure, which is more of a broad symptom rather than a root cause, the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data. Notable Common Weakness Enumerations (CWEs) included are CWE-259: Use of Hard-coded Password, CWE-327: Broken or Risky Crypto Algorithm, and CWE-331 Insufficient Entropy.</p> <p><br><span style="font-size: 24px;"><strong>Description</strong></span></p> <p><br>The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS). For all such data: <ol> <li> Is any data transmitted in clear text? This concerns protocols such as HTTP, SMTP, FTP also using TLS upgrades like STARTTLS. External internet traffic is hazardous. Verify all internal traffic, e.g., between load balancers, web servers, or back-end systems. </li> <li> Are any old or weak cryptographic algorithms or protocols used either by default or in older code? </li> <li> Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories? </li> <li> Is encryption not enforced, e.g., are any HTTP headers (browser) security directives or headers missing? </li> <li> Is the received server certificate and the trust chain properly validated? </li> <li> Are initialization vectors ignored, reused, or not generated sufficiently secure for the cryptographic mode of operation? Is an insecure mode of operation such as ECB in use? Is encryption used when authenticated encryption is more appropriate? </li> <li> Are passwords being used as cryptographic keys in absence of a password base key derivation function? </li> <li> Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer, and if not, has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability? </li> <li> Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptographic hash functions are needed? </li> <li> Are deprecated cryptographic padding methods such as PKCS number 1 v1.5 in use? </li> <li> Are cryptographic error messages or side channel information exploitable, for example in the form of padding oracle attacks? </li> </ol> See ASVS Crypto (V7), Data Protection (V9), and SSL/TLS (V10)</p> <p><br><span style="font-size: 24px;"><strong>How to Prevent</strong></span></p> <p><br>Do the following, at a minimum, and consult the references:<br> <p> Do the following, at a minimum, and consult the references: Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs. Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen. Make sure to encrypt all sensitive data at rest. Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management. Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS). Disable caching for response that contain sensitive data. Apply required security controls as per the data classification. Do not use legacy protocols such as FTP and SMTP for transporting sensitive data. Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2. Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key. Always use authenticated encryption instead of just encryption. Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function. Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security. Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 . Verify independently the effectiveness of configuration and settings. </p> </p> <p><br><span style="font-size: 24px;"><strong>Description</strong></span></p> <p> Scenario #1: An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved, allowing a SQL injection flaw to retrieve credit card numbers in clear text. Scenario #2: A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (e.g., at an insecure wireless network), downgrades connections from HTTPS to HTTP, intercepts requests, and steals the user's session cookie. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. Instead of the above they could alter all transported data, e.g., the recipient of a money transfer. Scenario #3: The password database uses unsalted or simple hashes to store everyone's passwords. A file upload flaw allows an attacker to retrieve the password database. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPUs, even if they were salted </p></div>`,
        image_name : "crypto_failures",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 3,
        title : "A03:2021-Injection",
        truncat : "slides down to the third position. 94% of the applications were tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3.37%, and the 33 CWEs mapped into this category have the second most occurrences in applications with 274k occurrences. Cross-site Scripting is now part of this category in this edition",
        description : `<h2 id="overview">Overview</h2><p>Injection slides down to the third position. 94% of the applicationswere tested for some form of injection with a max incidence rate of 19%, an average incidence rate of 3%, and 274k occurrences. Notable Common Weakness Enumerations (CWEs) included are<em>CWE-79: Cross-site Scripting</em>, <em>CWE-89: SQL Injection</em>, and <em>CWE-73:External Control of File Name or Path</em>.</p><h2 id="description">Description</h2><p>An application is vulnerable to attack when:</p><ul><li><p>User-supplied data is not validated, filtered, or sanitized by theapplication.</p></li><li><p>Dynamic queries or non-parameterized calls without context-awareescaping are used directly in the interpreter.</p></li><li><p>Hostile data is used within object-relational mapping (ORM) searchparameters to extract additional, sensitive records.</p></li><li><p>Hostile data is directly used or concatenated. The SQL or commandcontains the structure and malicious data in dynamic queries,commands, or stored procedures.</p></li></ul><p>Some of the more common injections are SQL, NoSQL, OS command, ObjectRelational Mapping (ORM), LDAP, and Expression Language (EL) or ObjectGraph Navigation Library (OGNL) injection. The concept is identicalamong all interpreters. Source code review is the best method ofdetecting if applications are vulnerable to injections. Automatedtesting of all parameters, headers, URL, cookies, JSON, SOAP, and XMLdata inputs is strongly encouraged. Organizations can includestatic (SAST), dynamic (DAST), and interactive (IAST) application security testing tools into the CI/CDpipeline to identify introduced injection flaws before productiondeployment.</p><h2 id="how-to-prevent">How to Prevent</h2><p>Preventing injection requires keeping data separate from commands and queries:</p><ul><li><p>The preferred option is to use a safe API, which avoids using theinterpreter entirely, provides a parameterized interface, ormigrates to Object Relational Mapping Tools (ORMs).<br /><strong>Note:</strong> Even when parameterized, stored procedures can still introduceSQL injection if PL/SQL or T-SQL concatenates queries and data orexecutes hostile data with EXECUTE IMMEDIATE or exec().</p></li><li><p>Use positive server-side input validation. This isnot a complete defense as many applications require specialcharacters, such as text areas or APIs for mobile applications.</p></li><li><p>For any residual dynamic queries, escape special characters usingthe specific escape syntax for that interpreter.<br /><strong>Note:</strong> SQL structures such as table names, column names, and so oncannot be escaped, and thus user-supplied structure names aredangerous. This is a common issue in report-writing software.</p></li><li><p>Use LIMIT and other SQL controls within queries to prevent massdisclosure of records in case of SQL injection.</p></li></ul><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1:</strong> An application uses untrusted data in the constructionof the following vulnerable SQL call:</p><pre><code>String query = &quot;SELECT \* FROM accounts WHERE custID='&quot; + request.getParameter(&quot;id&quot;) + &quot;'&quot;;</code></pre><p><strong>Scenario #2:</strong> Similarly, an application’s blind trust in frameworksmay result in queries that are still vulnerable, (e.g., Hibernate QueryLanguage (HQL)):</p><pre><code> Query HQLQuery = session.createQuery(&quot;FROM accounts WHERE custID='&quot; + request.getParameter(&quot;id&quot;) + &quot;'&quot;);</code></pre><p>In both cases, the attacker modifies the ‘id’ parameter value in theirbrowser to send: ‘ or ‘1’=’1. For example:</p><pre><code> http://example.com/app/accountView?id=' or '1'='1</code></pre><p>This changes the meaning of both queries to return all the records fromthe accounts table. More dangerous attacks could modify or delete dataor even invoke stored procedures.</p>`,
        image_name : "final_injection",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 5,
        title : "A04:2021-Insecure Design",
        truncat : "moves up from the fifth position to the category with the most serious web application security risk; the contributed data indicates that on average, 3.81% of applications tested had one or more Common Weakness Enumerations (CWEs) with more than 318k occurrences of CWEs in this risk category. The 34 CWEs mapped to Broken Access Control had more occurrences in applications than any other category",
        description : `<h2 id="overview">Overview</h2><p>A new category for 2021 focuses on risks related to design and architectural flaws, with a call for more use of threat modeling, secure design patterns, and reference architectures. As a community we need to move beyond "shift-left" in the coding space to pre-code activities that are critical for the principles of Secure by Design. Notable Common Weakness Enumerations (CWEs) include <em>CWE-209: Generation of Error Message Containing Sensitive Information</em>, <em>CWE-256: Unprotected Storage of Credentials</em>, <em>CWE-501: Trust Boundary Violation</em>, and <em>CWE-522: Insufficiently Protected Credentials</em>.</p><h2 id="description">Description</h2><p>Insecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.</p><h3 id="requirements-and-resource-management">Requirements and Resource Management</h3><p>Collect and negotiate the business requirements for an application with the business, including the protection requirements concerning confidentiality, integrity, availability, and authenticity of all data assets and the expected business logic. Take into account how exposed your application will be and if you need segregation of tenants (additionally to access control). Compile the technical requirements, including functional and non-functional security requirements. Plan and negotiate the budget covering all design, build, testing, and operation, including security activities.</p><h3 id="secure-design">Secure Design</h3><p>Secure design is a culture and methodology that constantly evaluates threats and ensures that code is robustly designed and tested to prevent known attack methods. Threat modeling should be integrated into refinement sessions (or similar activities); look for changes in data flows and access control or other security controls. In the user story development determine the correct flow and failure states, ensure they are well understood and agreed upon by responsible and impacted parties. Analyze assumptions and conditions for expected and failure flows, ensure they are still accurate and desirable. Determine how to validate the assumptions and enforce conditions needed for proper behaviors. Ensure the results are documented in the user story. Learn from mistakes and offer positive incentives to promote improvements. Secure design is neither an add-on nor a tool that you can add to software.</p><h3 id="secure-development-lifecycle">Secure Development Lifecycle</h3><p>Secure software requires a secure development lifecycle, some form of secure design pattern, paved road methodology, secured component library, tooling, and threat modeling. Reach out for your security specialists at the beginning of a software project throughout the whole project and maintenance of your software. Consider leveraging the <a href="https://owaspsamm.org">OWASP Software Assurance Maturity Model (SAMM)</a> to help structure your secure software development efforts.</p><h2 id="how-to-prevent">How to Prevent</h2><ul><li><p>Establish and use a secure development lifecycle with AppSecprofessionals to help evaluate and design security andprivacy-related controls</p></li><li><p>Establish and use a library of secure design patterns or paved roadready to use components</p></li><li><p>Use threat modeling for critical authentication, access control,business logic, and key flows</p></li><li><p>Integrate security language and controls into user stories</p></li><li><p>Integrate plausibility checks at each tier of your application(from frontend to backend)</p></li><li><p>Write unit and integration tests to validate that all critical flowsare resistant to the threat model. Compile use-cases <em>and</em> misuse-casesfor each tier of your application.</p></li><li><p>Segregate tier layers on the system and network layers depending on theexposure and protection needs</p></li><li><p>Segregate tenants robustly by design throughout all tiers</p></li><li><p>Limit resource consumption by user or service</p></li></ul><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1:</strong> A credential recovery workflow might include “questionsand answers,” which is prohibited by NIST 800-63b, the OWASP ASVS, andthe OWASP Top 10. Questions and answers cannot be trusted as evidence ofidentity as more than one person can know the answers, which is why theyare prohibited. Such code should be removed and replaced with a moresecure design.</p><p><strong>Scenario #2:</strong> A cinema chain allows group booking discounts and has amaximum of fifteen attendees before requiring a deposit. Attackers couldthreat model this flow and test if they could book six hundred seats andall cinemas at once in a few requests, causing a massive loss of income.</p><p><strong>Scenario #3:</strong> A retail chain’s e-commerce website does not haveprotection against bots run by scalpers buying high-end video cards toresell auction websites. This creates terrible publicity for the videocard makers and retail chain owners and enduring bad blood withenthusiasts who cannot obtain these cards at any price. Careful anti-botdesign and domain logic rules, such as purchases made within a fewseconds of availability, might identify inauthentic purchases andrejected such transactions.</p>`,
        image_name : "insecure_design",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 6,
        title : "A05:2021-Security Misconfigurationn",
        truncat : " moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration, with an average incidence rate of 4.5%, and over 208k occurrences of CWEs mapped to this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up. The former category for A4:2017-XML External Entities (XXE) is now part of this risk category",
        description : `<h2 id="overview">Overview</h2><p>Moving up from #6 in the previous edition, 90% of applications weretested for some form of misconfiguration, with an average incidence rate of 4.%, and over 208k occurences of a Common Weakness Enumeration (CWE) in this risk category. With more shifts into highly configurable software, it's not surprising to see this category move up.Notable CWEs included are <em>CWE-16 Configuration</em> and <em>CWE-611 ImproperRestriction of XML External Entity Reference</em>.</p><h2 id="description">Description</h2><p>The application might be vulnerable if the application is:</p><ul><li><p>Missing appropriate security hardening across any part of theapplication stack or improperly configured permissions on cloudservices.</p></li><li><p>Unnecessary features are enabled or installed (e.g., unnecessaryports, services, pages, accounts, or privileges).</p></li><li><p>Default accounts and their passwords are still enabled andunchanged.</p></li><li><p>Error handling reveals stack traces or other overly informativeerror messages to users.</p></li><li><p>For upgraded systems, the latest security features are disabled ornot configured securely.</p></li><li><p>The security settings in the application servers, applicationframeworks (e.g., Struts, Spring, ASP.NET), libraries, databases,etc., are not set to secure values.</p></li><li><p>The server does not send security headers or directives, or they arenot set to secure values.</p></li><li><p>The software is out of date or vulnerable (see <a href="../A06_2021-Vulnerable_and_Outdated_Components/">A06:2021-Vulnerableand Outdated Components</a>).</p></li></ul><p>Without a concerted, repeatable application security configurationprocess, systems are at a higher risk.</p><h2 id="how-to-prevent">How to Prevent</h2><p>Secure installation processes should be implemented, including:</p><ul><li><p>A repeatable hardening process makes it fast and easy to deployanother environment that is appropriately locked down. Development,QA, and production environments should all be configuredidentically, with different credentials used in each environment.This process should be automated to minimize the effort required toset up a new secure environment.</p></li><li><p>A minimal platform without any unnecessary features, components,documentation, and samples. Remove or do not install unused featuresand frameworks.</p></li><li><p>A task to review and update the configurations appropriate to allsecurity notes, updates, and patches as part of the patch managementprocess (see <a href="../A06_2021-Vulnerable_and_Outdated_Components/">A06:2021-Vulnerableand Outdated Components</a>). Reviewcloud storage permissions (e.g., S3 bucket permissions).</p></li><li><p>A segmented application architecture provides effective and secureseparation between components or tenants, with segmentation,containerization, or cloud security groups (ACLs).</p></li><li><p>Sending security directives to clients, e.g., Security Headers.</p></li><li><p>An automated process to verify the effectiveness of theconfigurations and settings in all environments.</p></li></ul><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1:</strong> The application server comes with sample applicationsnot removed from the production server. These sample applications haveknown security flaws attackers use to compromise the server. Suppose oneof these applications is the admin console, and default accounts weren'tchanged. In that case, the attacker logs in with default passwords andtakes over.</p><p><strong>Scenario #2:</strong> Directory listing is not disabled on the server. Anattacker discovers they can simply list directories. The attacker findsand downloads the compiled Java classes, which they decompile andreverse engineer to view the code. The attacker then finds a severeaccess control flaw in the application.</p><p><strong>Scenario #3:</strong> The application server's configuration allows detailederror messages, e.g., stack traces, to be returned to users. Thispotentially exposes sensitive information or underlying flaws such ascomponent versions that are known to be vulnerable.</p><p><strong>Scenario #4:</strong> A cloud service provider (CSP) has default sharingpermissions open to the Internet by other CSP users. This allowssensitive data stored within cloud storage to be accessed.</p>`,
        image_name : "misconfiguration",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 7,
        title : "A06:2021-Vulnerable and Outdated Components",
        truncat : "was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores",
        description : `<h2 id="overview">Overview</h2><p>It was #2 from the Top 10 community survey but also had enough data to make theTop 10 via data. Vulnerable Components are a known issue that westruggle to test and assess risk and is the only category to not haveany Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploits/impactweight of 5.0 is used. Notable CWEs included are <em>CWE-1104: Use ofUnmaintained Third-Party Components</em> and the two CWEs from Top 10 2013and 2017.</p><h2 id="description">Description</h2><p>You are likely vulnerable:</p><ul><li><p>If you do not know the versions of all components you use (bothclient-side and server-side). This includes components you directlyuse as well as nested dependencies.</p></li><li><p>If the software is vulnerable, unsupported, or out of date. Thisincludes the OS, web/application server, database management system(DBMS), applications, APIs and all components, runtime environments,and libraries.</p></li><li><p>If you do not scan for vulnerabilities regularly and subscribe tosecurity bulletins related to the components you use.</p></li><li><p>If you do not fix or upgrade the underlying platform, frameworks,and dependencies in a risk-based, timely fashion. This commonlyhappens in environments when patching is a monthly or quarterly taskunder change control, leaving organizations open to days or monthsof unnecessary exposure to fixed vulnerabilities.</p></li><li><p>If software developers do not test the compatibility of updated,upgraded, or patched libraries.</p></li><li><p>If you do not secure the components’ configurations (see<a href="../A05_2021-Security_Misconfiguration/">A05:2021-Security Misconfiguration</a>).</p></li></ul><h2 id="how-to-prevent">How to Prevent</h2><p>There should be a patch management process in place to:</p><ul><li><p>Remove unused dependencies, unnecessary features, components, files,and documentation.</p></li><li><p>Continuously inventory the versions of both client-side andserver-side components (e.g., frameworks, libraries) and theirdependencies using tools like versions, OWASP Dependency Check,retire.js, etc. Continuously monitor sources like Common Vulnerability andExposures (CVE) and National Vulnerability Database (NVD) forvulnerabilities in the components. Use software composition analysistools to automate the process. Subscribe to email alerts forsecurity vulnerabilities related to components you use.</p></li><li><p>Only obtain components from official sources over secure links.Prefer signed packages to reduce the chance of including a modified,malicious component (See A08:2021-Software and Data IntegrityFailures).</p></li><li><p>Monitor for libraries and components that are unmaintained or do notcreate security patches for older versions. If patching is notpossible, consider deploying a virtual patch to monitor, detect, orprotect against the discovered issue.</p></li></ul><p>Every organization must ensure an ongoing plan for monitoring, triaging,and applying updates or configuration changes for the lifetime of theapplication or portfolio.</p><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1:</strong> Components typically run with the same privileges asthe application itself, so flaws in any component can result in seriousimpact. Such flaws can be accidental (e.g., coding error) or intentional(e.g., a backdoor in a component). Some example exploitable componentvulnerabilities discovered are:</p><ul><li><p>CVE-2017-5638, a Struts 2 remote code execution vulnerability thatenables the execution of arbitrary code on the server, has beenblamed for significant breaches.</p></li><li><p>While the internet of things (IoT) is frequently difficult orimpossible to patch, the importance of patching them can be great(e.g., biomedical devices).</p></li></ul><p>There are automated tools to help attackers find unpatched ormisconfigured systems. For example, the Shodan IoT search engine canhelp you find devices that still suffer from Heartbleed vulnerabilitypatched in April 2014.</p>`,
        image_name : "outdated_components",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 8,
        title : "A07:2021-Identification and Authentication Failures ",
        truncat : "was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping",
        description : `<h2 id="overview">Overview</h2><p>Previously known as <em>Broken Authentication</em>, this category slid downfrom the second position and now includes Common WeaknessEnumerations (CWEs) related to identificationfailures. Notable CWEs included are <em>CWE-297: Improper Validation ofCertificate with Host Mismatch</em>, <em>CWE-287: Improper Authentication</em>, and<em>CWE-384: Session Fixation</em>.</p><h2 id="description">Description</h2><p>Confirmation of the user's identity, authentication, and sessionmanagement is critical to protect against authentication-relatedattacks. There may be authentication weaknesses if the application:</p><ul><li><p>Permits automated attacks such as credential stuffing, where theattacker has a list of valid usernames and passwords.</p></li><li><p>Permits brute force or other automated attacks.</p></li><li><p>Permits default, weak, or well-known passwords, such as "Password1"or "admin/admin".</p></li><li><p>Uses weak or ineffective credential recovery and forgot-passwordprocesses, such as "knowledge-based answers," which cannot be madesafe.</p></li><li><p>Uses plain text, encrypted, or weakly hashed passwords data stores (see<a href="../A02_2021-Cryptographic_Failures/">A02:2021-Cryptographic Failures</a>).</p></li><li><p>Has missing or ineffective multi-factor authentication.</p></li><li><p>Exposes session identifier in the URL.</p></li><li><p>Reuse session identifier after successful login.</p></li><li><p>Does not correctly invalidate Session IDs. User sessions orauthentication tokens (mainly single sign-on (SSO) tokens) aren'tproperly invalidated during logout or a period of inactivity.</p></li></ul><h2 id="how-to-prevent">How to Prevent</h2><ul><li><p>Where possible, implement multi-factor authentication to preventautomated credential stuffing, brute force, and stolen credentialreuse attacks.</p></li><li><p>Do not ship or deploy with any default credentials, particularly foradmin users.</p></li><li><p>Implement weak password checks, such as testing new or changedpasswords against the top 10,000 worst passwords list.</p></li><li><p>Align password length, complexity, and rotation policies withNational Institute of Standards and Technology (NIST)800-63b's guidelines in section 5.1.1 for Memorized Secrets or othermodern, evidence-based password policies.</p></li><li><p>Ensure registration, credential recovery, and API pathways arehardened against account enumeration attacks by using the samemessages for all outcomes.</p></li><li><p>Limit or increasingly delay failed login attempts, but be careful not to create a denial of service scenario. Log all failuresand alert administrators when credential stuffing, brute force, orother attacks are detected.</p></li><li><p>Use a server-side, secure, built-in session manager that generates anew random session ID with high entropy after login. Session identifiershould not be in the URL, be securely stored, and invalidated afterlogout, idle, and absolute timeouts.</p></li></ul><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1:</strong> Credential stuffing, the use of lists of knownpasswords, is a common attack. Suppose an application does not implementautomated threat or credential stuffing protection. In that case, theapplication can be used as a password oracle to determine if thecredentials are valid.</p><p><strong>Scenario #2:</strong> Most authentication attacks occur due to the continueduse of passwords as a sole factor. Once considered best practices,password rotation and complexity requirements encourage users to useand reuse weak passwords. Organizations are recommended to stop thesepractices per NIST 800-63 and use multi-factor authentication.</p><p><strong>Scenario #3:</strong> Application session timeouts aren't set correctly. Auser uses a public computer to access an application. Instead ofselecting "logout," the user simply closes the browser tab and walksaway. An attacker uses the same browser an hour later, and the user isstill authenticated.</p>`,
        image_name : "authentication_failures",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 9,
        title : "A08:2021-Software and Data Integrity Failures",
        truncat : "is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data mapped to the 10 CWEs in this category. A8:2017-Insecure Deserialization is now a part of this larger category",
        description : `<h2 id="overview">Overview</h2><p>A new category for 2021 focuses on making assumptions related tosoftware updates, critical data, and CI/CD pipelines without verifyingintegrity. One of the highest weighted impacts fromCommon Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS)data. Notable Common Weakness Enumerations (CWEs) include<em>CWE-829: Inclusion of Functionality from Untrusted Control Sphere</em>,<em>CWE-494: Download of Code Without Integrity Check</em>, and<em>CWE-502: Deserialization of Untrusted Data</em>.</p><h2 id="description">Description</h2><p>Software and data integrity failures relate to code and infrastructurethat does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and contentdelivery networks (CDNs). An insecure CI/CD pipeline can introduce thepotential for unauthorized access, malicious code, or system compromise.Lastly, many applications now include auto-update functionality, whereupdates are downloaded without sufficient integrity verification andapplied to the previously trusted application. Attackers couldpotentially upload their own updates to be distributed and run on allinstallations. Another example is whereobjects or data are encoded or serialized into a structure that anattacker can see and modify is vulnerable to insecure deserialization.</p><h2 id="how-to-prevent">How to Prevent</h2><ul><li><p>Use digital signatures or similar mechanisms to verify the software or data is from the expected source and has not been altered.</p></li><li><p>Ensure libraries and dependencies, such as npm or Maven, areconsuming trusted repositories. If you have a higher risk profile, consider hosting an internal known-good repository that's vetted.</p></li><li><p>Ensure that a software supply chain security tool, such as OWASPDependency Check or OWASP CycloneDX, is used to verify thatcomponents do not contain known vulnerabilities</p></li><li><p>Ensure that there is a review process for code and configuration changes to minimize the chance that malicious code or configuration could be introduced into your software pipeline.</p></li><li><p>Ensure that your CI/CD pipeline has proper segregation, configuration, and accesscontrol to ensure the integrity of the code flowing through thebuild and deploy processes.</p></li><li><p>Ensure that unsigned or unencrypted serialized data is not sent tountrusted clients without some form of integrity check or digitalsignature to detect tampering or replay of the serialized data</p></li></ul><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1 Update without signing:</strong> Many home routers, set-topboxes, device firmware, and others do not verify updates via signedfirmware. Unsigned firmware is a growing target for attackers and isexpected to only get worse. This is a major concern as many times thereis no mechanism to remediate other than to fix in a future version andwait for previous versions to age out.</p><p><strong>Scenario #2 SolarWinds malicious update</strong>: Nation-states have beenknown to attack update mechanisms, with a recent notable attack beingthe SolarWinds Orion attack. The company that develops the software hadsecure build and update integrity processes. Still, these were able tobe subverted, and for several months, the firm distributed a highlytargeted malicious update to more than 18,000 organizations, of whicharound 100 or so were affected. This is one of the most far-reaching andmost significant breaches of this nature in history.</p><p><strong>Scenario #3 Insecure Deserialization:</strong> A React application calls aset of Spring Boot microservices. Being functional programmers, theytried to ensure that their code is immutable. The solution they came upwith is serializing the user state and passing it back and forth witheach request. An attacker notices the "rO0" Java object signature (in base64) anduses the Java Serial Killer tool to gain remote code execution on theapplication server.</p>`,
        image_name : "integrity_failures",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 10,
        title : "A10:2021-Server-Side Request Forgery",
        truncat : " is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it's not illustrated in the data at this time",
        description : `<h2 id="overview">Overview</h2><p>Security logging and monitoring came from the Top 10 community survey (#3), upslightly from the tenth position in the OWASP Top 10 2017. Logging andmonitoring can be challenging to test, often involving interviews orasking if attacks were detected during a penetration test. There isn'tmuch CVE/CVSS data for this category, but detecting and responding tobreaches is critical. Still, it can be very impactful for accountability, visibility,incident alerting, and forensics. This category expands beyond <em>CWE-778Insufficient Logging</em> to include <em>CWE-117 Improper Output Neutralizationfor Logs</em>, <em>CWE-223 Omission of Security-relevant Information</em>, and<em>CWE-532</em> <em>Insertion of Sensitive Information into Log File</em>.</p><h2 id="description">Description</h2><p>Returning to the OWASP Top 10 2021, this category is to help detect,escalate, and respond to active breaches. Without logging andmonitoring, breaches cannot be detected. Insufficient logging,detection, monitoring, and active response occurs any time:</p><ul><li><p>Auditable events, such as logins, failed logins, and high-valuetransactions, are not logged.</p></li><li><p>Warnings and errors generate no, inadequate, or unclear logmessages.</p></li><li><p>Logs of applications and APIs are not monitored for suspiciousactivity.</p></li><li><p>Logs are only stored locally.</p></li><li><p>Appropriate alerting thresholds and response escalation processesare not in place or effective.</p></li><li><p>Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) donot trigger alerts.</p></li><li><p>The application cannot detect, escalate, or alert for active attacksin real-time or near real-time.</p></li></ul><p>You are vulnerable to information leakage by making logging and alertingevents visible to a user or an attacker (see <a href="../A01_2021-Broken_Access_Control/">A01:2021-Broken Access Control</a>).</p><h2 id="how-to-prevent">How to Prevent</h2><p>Developers should implement some or all the following controls,depending on the risk of the application:</p><ul><li><p>Ensure all login, access control, and server-side input validationfailures can be logged with sufficient user context to identifysuspicious or malicious accounts and held for enough time to allowdelayed forensic analysis.</p></li><li><p>Ensure that logs are generated in a format that log managementsolutions can easily consume.</p></li><li><p>Ensure log data is encoded correctly to prevent injections orattacks on the logging or monitoring systems.</p></li><li><p>Ensure high-value transactions have an audit trail with integritycontrols to prevent tampering or deletion, such as append-onlydatabase tables or similar.</p></li><li><p>DevSecOps teams should establish effective monitoring and alertingsuch that suspicious activities are detected and responded toquickly.</p></li><li><p>Establish or adopt an incident response and recovery plan, such asNational Institute of Standards and Technology (NIST) 800-61r2 or later.</p></li></ul><p>There are commercial and open-source application protection frameworkssuch as the OWASP ModSecurity Core Rule Set, and open-source logcorrelation software, such as the Elasticsearch, Logstash, Kibana (ELK)stack, that feature custom dashboards and alerting.</p><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p><strong>Scenario #1:</strong> A children's health plan provider's website operatorcouldn't detect a breach due to a lack of monitoring and logging. Anexternal party informed the health plan provider that an attacker hadaccessed and modified thousands of sensitive health records of more than3.5 million children. A post-incident review found that the websitedevelopers had not addressed significant vulnerabilities. As there wasno logging or monitoring of the system, the data breach could have beenin progress since 2013, a period of more than seven years.</p><p><strong>Scenario #2:</strong> A major Indian airline had a data breach involving morethan ten years' worth of personal data of millions of passengers,including passport and credit card data. The data breach occurred at athird-party cloud hosting provider, who notified the airline of thebreach after some time.</p><p><strong>Scenario #3:</strong> A major European airline suffered a GDPR reportablebreach. The breach was reportedly caused by payment application securityvulnerabilities exploited by attackers, who harvested more than 400,000customer payment records. The airline was fined 20 million pounds as aresult by the privacy regulator.</p>`,
        image_name : "final_SSRF",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
    {
        id : 11,
        title : "A09:2021-Security Logging and Monitoring Failures",
        truncat : "was previously A10:2017-Insufficient Logging & Monitoring and is added from the Top 10 community survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn't well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics.",
        description : `<h2 id="overview">Overview</h2><p>This category is added from the Top 10 community survey (#1). The data shows arelatively low incidence rate with above average testing coverage andabove-average Exploit and Impact potential ratings. As new entries arelikely to be a single or small cluster of Common Weakness Enumerations (CWEs)for attention andawareness, the hope is that they are subject to focus and can be rolledinto a larger category in a future edition.</p><h2 id="description">Description</h2><p>SSRF flaws occur whenever a web application is fetching a remoteresource without validating the user-supplied URL. It allows an attackerto coerce the application to send a crafted request to an unexpecteddestination, even when protected by a firewall, VPN, or another type ofnetwork access control list (ACL).</p><p>As modern web applications provide end-users with convenient features,fetching a URL becomes a common scenario. As a result, the incidence ofSSRF is increasing. Also, the severity of SSRF is becoming higher due tocloud services and the complexity of architectures.</p><h2 id="how-to-prevent">How to Prevent</h2><p>Developers can prevent SSRF by implementing some or all the followingdefense in depth controls:</p><h3 id="from-network-layer"><strong>From Network layer</strong></h3><ul><li><p>Segment remote resource access functionality in separate networks toreduce the impact of SSRF</p></li><li><p>Enforce “deny by default” firewall policies or network accesscontrol rules to block all but essential intranet traffic.<br /><em>Hints:</em><br>~ Establish an ownership and a lifecycle for firewall rules based on applications.<br />~ Log all accepted <em>and</em> blocked network flows on firewalls(see <a href="../A09_2021-Security_Logging_and_Monitoring_Failures/">A09:2021-Security Logging and Monitoring Failures</a>).</p></li></ul><h3 id="from-application-layer"><strong>From Application layer:</strong></h3><ul><li><p>Sanitize and validate all client-supplied input data</p></li><li><p>Enforce the URL schema, port, and destination with a positive allowlist</p></li><li><p>Do not send raw responses to clients</p></li><li><p>Disable HTTP redirections</p></li><li><p>Be aware of the URL consistency to avoid attacks such as DNSrebinding and “time of check, time of use” (TOCTOU) race conditions</p></li></ul><p>Do not mitigate SSRF via the use of a deny list or regular expression.Attackers have payload lists, tools, and skills to bypass deny lists.</p><h3 id="additional-measures-to-consider"><strong>Additional Measures to consider:</strong></h3><ul><li><p>Don't deploy other security relevant services on front systems (e.g. OpenID).Control local traffic on these systems (e.g. localhost)</p></li><li><p>For frontends with dedicated and manageable user groups use network encryption (e.g. VPNs)on independent systems to consider very high protection needs </p></li></ul><h2 id="example-attack-scenarios">Example Attack Scenarios</h2><p>Attackers can use SSRF to attack systems protected behind webapplication firewalls, firewalls, or network ACLs, using scenarios suchas:</p><p><strong>Scenario #1:</strong> Port scan internal servers – If the network architectureis unsegmented, attackers can map out internal networks and determine ifports are open or closed on internal servers from connection results orelapsed time to connect or reject SSRF payload connections.</p><p><strong>Scenario #2:</strong> Sensitive data exposure – Attackers can access localfiles or internal services to gain sensitive information suchas <code>file:///etc/passwd&lt;/span&gt;</code> and <code>http://localhost:28017/</code>.</p><p><strong>Scenario #3:</strong> Access metadata storage of cloud services – Most cloudproviders have metadata storage such as <code>http://169.254.169.254/</code>. Anattacker can read the metadata to gain sensitive information.</p><p><strong>Scenario #4:</strong> Compromise internal services – The attacker can abuseinternal services to conduct further attacks such as Remote CodeExecution (RCE) or Denial of Service (DoS).</p>`,
        image_name : "monitoring_failures",
        created_at : "",
        author : {
            first_name : "",
            last_name : "",
            image : "",
            user_name : ""
        }
    },
]